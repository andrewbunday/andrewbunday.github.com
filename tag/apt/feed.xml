<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/tag/apt/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-06-23T22:14:30+00:00</updated>
  <id>/tag/apt/feed.xml</id>

  
  
  

  
    <title type="html">Andrew Bunday | </title>
  

  
    <subtitle>Thoughts and Ideas</subtitle>
  

  

  
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">ReproWeb - A micro repository browser</title>
      <link href="/2012/11/12/reproweb-repository-browser" rel="alternate" type="text/html" title="ReproWeb - A micro repository browser" />
      <published>2012-11-12T18:05:00+00:00</published>
      <updated>2012-11-12T18:05:00+00:00</updated>
      <id>/2012/11/12/reproweb-repository-browser</id>
      <content type="html" xml:base="/2012/11/12/reproweb-repository-browser">&lt;p&gt;A few weeks ago we finished a first draft release of &lt;a href=&quot;http://github.com/andrewbunday/reproweb&quot;&gt;ReproWeb&lt;/a&gt;, a small, light weight apt repository browser.&lt;/p&gt;

&lt;p&gt;The browser was built out of an increasing need we were finding, to be able to introspect into our main production repository.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://github.com/andrewbunday/reproweb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the course of 1.5 years that repository has grown to the point when the main stable channel contains around 334 individual packages whilst the unstable channel contains a further 149.&lt;/p&gt;

&lt;p&gt;Without running apt-cache commands, and munging with our software source lists it was becoming difficult to not only find the name/version of a piece of software, but it was also becoming hard to tell:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the package was created&lt;/li&gt;
  &lt;li&gt;Who created the package&lt;/li&gt;
  &lt;li&gt;If the package had a newer version in the unstable channel&lt;/li&gt;
  &lt;li&gt;If the package was available in the stable channel&lt;/li&gt;
  &lt;li&gt;If the package had been published for all of our supported distributions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Almost all of these tasks can be carried out from a terminal using commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get show&lt;/code&gt;, but the web interface allows for far quicker navigation, comparison and has already started us asking more questions as our understanding of the data in our repository grows.&lt;/p&gt;

&lt;h2 id=&quot;current-feature-set&quot;&gt;Current Feature Set&lt;/h2&gt;

&lt;p&gt;At present Reproweb allows a user to perform filters on the content of a repository based on either;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simple string pattern matching against either the package name, version string or codename/component/architecture,&lt;/li&gt;
  &lt;li&gt;or by browsing through the hierarchy of the repository from:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;codename -&amp;gt; component -&amp;gt; architecture -&amp;gt; package -&amp;gt; version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;browsing&quot;&gt;Browsing&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you find yourself wanting to know more about your repository? Perhaps how many packages are in a particular component? or perhaps you don’t know the structure of your repository and you want to get to know it more intimately?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These screenshots show:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The root of the repository, listing the currently defined distributions.
Metadata associated with the distribution is also listed along with information such as the components available within the distribtuion and the total number of packages currently published within it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/andrewbunday/ReproWeb/raw/master/documentation/images/image_07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The breadcrumb which is left at the top of the interface as you delve deeper into the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/andrewbunday/ReproWeb/raw/master/documentation/images/image_08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;searching&quot;&gt;Searching&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do you have a specific package you are looking for? Do you know it’s name or version and don’t want to have to go browsing around for it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The package list shows all of the packages currently available for a given architecture or all of the packages across all of the distributions in the repository. The search box can be used to search through these packages, as you type it will filter out those packages which don’t match.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/andrewbunday/ReproWeb/raw/master/documentation/images/image_05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;future-ideas&quot;&gt;Future Ideas&lt;/h2&gt;

&lt;p&gt;This is a list of the features which I’d like to add in time.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make the package view accessable at an point in the browser, so for example
allow listing of packages in a component.&lt;/li&gt;
  &lt;li&gt;Complete json endpoints for all urls.&lt;/li&gt;
  &lt;li&gt;Renaming or package or version number.&lt;/li&gt;
  &lt;li&gt;Listing of unreferrenced versions. Or previous versions which are no longer
available in Releases.gz&lt;/li&gt;
  &lt;li&gt;Listing of pre/post install/remove scripts.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;get-hold-of-it-yourself&quot;&gt;Get hold of it yourself&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;I strongly recommending visiting &lt;a href=&quot;http://github.com/andrewbunday/reproweb&quot;&gt;http://github.com/andrewbunday/reproweb&lt;/a&gt; and start by reading the README and documentation on the repo.&lt;/p&gt;

&lt;p&gt;Or for the impatient in life:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# clone the repository&lt;/span&gt;

git clone https://github.com/andrewbunday/ReproWeb.git

&lt;span class=&quot;c&quot;&gt;# ensure that the cache directory has been created, or that you edit the setting in the configuration before you start up the app.&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkdir /var/cache/reproweb

&lt;span class=&quot;c&quot;&gt;# start it up&lt;/span&gt;

python debug-run.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h2&gt;

&lt;p&gt;Underneath the hood ReproWeb is built using only a handful of &lt;em&gt;(at the time of writing)&lt;/em&gt; actively developed tools.&lt;/p&gt;

&lt;p&gt;Development of Reproweb was conciously kept to a tight a deadline. We gave ourselves less than 2 weeks to go from establishing our initial requirements, having looked at the alternatives, to the first releaseable draft.&lt;/p&gt;

&lt;p&gt;This drove our decisions behind each of the components we used to build the application.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;reprepro&lt;/strong&gt; - This is the repository management tool which the browser has been designed to be used with. All of the interactions with reprepro are handled through via the 3rd party script reepocheep.py which could be swapped out with an equivalent script which provides the same api.&lt;/p&gt;

    &lt;p&gt;Since we were using reprepro already to manage our software package repositories it made complete sense to tailor the app to its strengths.&lt;/p&gt;

    &lt;p&gt;The majority of the heavy lifting for the app is handled by calls to reprepro via subprocess and then handling of the returned data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;flask&lt;/strong&gt; - A small web application backend framework which handles all of the functionality we need for it for this project. Something as feature rich as django would have been more cumbersome that the project required. Other parts of the Flask eco system were utilised, such as jinja2 to handle dynamic page generation.&lt;/p&gt;

    &lt;p&gt;This is one of my personally favourite frameworks to use when building these kinds of applications. Having worked previously with django and really having not gotten on well with it I’ve always been attracted to these lighter weight frameworks.&lt;/p&gt;

    &lt;p&gt;Another choice a few years ago might have been &lt;a href=&quot;http://webpy.org&quot;&gt;web.py&lt;/a&gt; which truely is a micro framework would have ended up being replaced as it reached its limits a little sooner than flask will.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;bootstrap&lt;/strong&gt; - A very user friendly web front-end framework which handles features such as responsive layout, navbar and general css styling consistency.&lt;/p&gt;

    &lt;p&gt;A few years ago if someone had told me that all of the css and jquery plugins I would need to build a webpage/app quickly with little stress I could download and get started with in minutes, I would have laughed and said ‘your sooo funny’. However now Bootstrap does all those things and it has made the lives of non-web developers such as myself far easier.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;datatables.js&lt;/strong&gt; - A damn awesome jquery plugin which completely powers the tabulated, sortable, filterable, paginated list of packages seen in the search view.&lt;/p&gt;

    &lt;p&gt;Does what it says on the tin. Credit goes to &lt;a href=&quot;http://paulnendick.github.com&quot;&gt;@PaulNendick&lt;/a&gt; for the find.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Andrew Bunday</name>
        
        
      </author>

      

      
        <category term="python" />
      
        <category term="apt" />
      
        <category term="flask" />
      

      
        <summary type="html">A few weeks ago we finished a first draft release of ReproWeb, a small, light weight apt repository browser.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">One time PPA additions using Puppet</title>
      <link href="/2012/10/16/triggering-ppas-only-once-with-puppet" rel="alternate" type="text/html" title="One time PPA additions using Puppet" />
      <published>2012-10-16T10:00:00+00:00</published>
      <updated>2012-10-16T10:00:00+00:00</updated>
      <id>/2012/10/16/triggering-ppas-only-once-with-puppet</id>
      <content type="html" xml:base="/2012/10/16/triggering-ppas-only-once-with-puppet">&lt;p&gt;When running puppet on our hosts we were finding that it would take not only far longer than we expected it to but that it was re-applying the creation of PPAs each time. These PPAs are critical for keeping our software up to date so we needed to find a way to keep them from being re-created on each run.&lt;/p&gt;

&lt;p&gt;Here’s the tl;dr version:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Puppet exec has a ‘creates =&amp;gt; somefile’ action. Add it to the exec definition which calls add-apt-repository to make it only run the first time before the file has been created.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;apt&quot;&gt;Apt&lt;/h2&gt;

&lt;p&gt;At Baseblack all of our workstations, render nodes and servers have their software packages, configured and managed via a combination of Puppet and Apt repositories.&lt;/p&gt;

&lt;p&gt;We preseed the build of a new host, pointing the installer at the official Ubuntu mirrors to retrieve the packages it requires. There are however many optional packages not yet included as part of universe or multiverse which our users find useful for their day to day work which we include on the system.&lt;/p&gt;

&lt;p&gt;For internal software and tools we use Jordan Sissel’s &lt;a href=&quot;https://github.com/jordansissel/fpm&quot;&gt;fpm&lt;/a&gt; to generate Debian packages which can then locally host in a &lt;a href=&quot;http://mirrorer.alioth.debian.org/&quot;&gt;reprepro&lt;/a&gt; managed apt repository.&lt;/p&gt;

&lt;p&gt;For those external pieces of software which are not in the official repositories we heavily rely upon Ubuntu’s &lt;a href=&quot;https://help.launchpad.net/Packaging/PPA&quot;&gt;PPA&lt;/a&gt; mechanism for adding additional unofficial packages to the system.&lt;/p&gt;

&lt;h2 id=&quot;ppas&quot;&gt;PPAs&lt;/h2&gt;

&lt;p&gt;PPAs were developed on top of Launchpad as a means of hosting and distributing software. Some examples of the software which we install using PPAs are; salt for orchestrated tasks, hugin the panorama stitcher and the latest nvidia graphics driver.&lt;/p&gt;

&lt;p&gt;The easiest way to add a ppa to the sources list is to use the add-apt-repository command. This takes the ppa’s short name, builds the apt url to access it, stores it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apt/sources.list.d/*&lt;/code&gt; and retrieves its public signing key.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;add-apt-repository ppa:username/package&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;puppet&quot;&gt;Puppet&lt;/h2&gt;

&lt;p&gt;We make use of the puppet-apt manifests put together by evolvingweb.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/evolvingweb/puppet-apt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately each time puppet was running we were finding that it would not only take longer than we expected, but that the time it took was variable. Often during the middle of the day when our internet connection was more heavily being utilised the runs would take substantially longer.&lt;/p&gt;

&lt;p&gt;We quickly saw when inspecting the run logs that on each run the ppas were being re-added into &lt;em&gt;sources.list.d&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using what little skill I have at writing puppet configurations and from &lt;strong&gt;&lt;em&gt;reading&lt;/em&gt;&lt;/strong&gt; the documentation I amended the apt::ppa definition to make use of the &lt;strong&gt;creates =&amp;gt;&lt;/strong&gt; parameter for the &lt;strong&gt;exec&lt;/strong&gt; action. This parameter causes the action to only be executed if the file which it points towards does not exist at the specified location.&lt;/p&gt;

&lt;p&gt;After adding the condition we found that our runs became much shorter and consistent in run time.&lt;/p&gt;

&lt;p&gt;Finally here is the amended definition in all of its terrible glory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;    &lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apt::ppa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$ppa_prefix&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ppa_name_repo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ppa_prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ppa_name&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ppa_name_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$ppa_repo&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ppa_name_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apt-update-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;command&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/aptitude update&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;refreshonly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;creates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/apt/sources.list.d/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${ppa_name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${ppa_repo}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${lsbdistcodename}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add-apt-repository-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/add-apt-repository &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;kp&quot;&gt;notify&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apt-update-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;${name}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content>

      
      
      
      
      

      <author>
          <name>Andrew Bunday</name>
        
        
      </author>

      

      
        <category term="puppet" />
      
        <category term="apt" />
      
        <category term="ppa" />
      

      
        <summary type="html">When running puppet on our hosts we were finding that it would take not only far longer than we expected it to but that it was re-applying the creation of PPAs each time. These PPAs are critical for keeping our software up to date so we needed to find a way to keep them from being re-created on each run.</summary>
      

      
      
    </entry>
  
</feed>
